#!/usr/bin/env ruby
#
# Copyright (C) 2013 NEC Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

required_path = File.dirname( __FILE__ ) + '/lib'
$LOAD_PATH.unshift required_path unless $LOAD_PATH.include? required_path

require 'optparse'
begin
require 'rubygems'
rescue LoadError
end

require 'configure'
require 'db'
require 'internal'
require 'log'
require 'network'

logger = Log.instance
logger.level = Log::INFO

DB::Log.logger = logger

def config_file
  File.dirname( __FILE__ ) + '/configure.yml'
end

def config
  Configure.instance.load_file( config_file )
  Configure.instance
end

option = OptionParser.new
db_config = config.db
db_config = Configure.instance.db
option.on( '-c arg', '--config-file=arg' ) do | arg |
  config.load_file arg
end
option.on( '-h arg', '--db-host=arg' ) do | arg |
  db_config[ 'host' ] = arg
end
option.on( '--db-port=arg' ) do | arg |
  db_config[ 'port' ] = arg.to_i
end
option.on( '-u arg', '--db-user=arg' ) do | arg |
  db_config[ 'username' ] = arg
end
option.on( '-p arg', '--db-password=arg' ) do | arg |
  db_config[ 'password' ] = arg
end
option.on( '-v', '--verbose' ) do | arg |
  logger.level = Log::DEBUG
end
# --update-transaction: debug only
option.on( '--update-transaction' ) do | arg |
  config[ 'update_transaction' ] = arg
end
option.on( '--help' ) do | arg |
  help
  exit 0
end

@subcommands = Hash.new do | hash, key |
  help_and_exit "Unknown command '#{ key }'"
end

def command subcommand, &a_proc
  @subcommands[ subcommand ] = a_proc
end

def help
  db_config = config.db
  puts <<EOS
Usage: slice [options] command [arguments...]

options
    -c, --config-file=arg - Configuration file (default: '#{ config_file }')
    -h, --db-host=arg     - Database host (default: '#{ db_config[ 'host' ]}')
        --db-port=arg     - Database port number to use for connection (default: '#{ db_config[ 'port' ]}')
    -u, --db-user=arg     - Database user for login (default: '#{ db_config[ 'username' ]}')
    -p, --db-password=arg - Database password to use for login (default: '#{ db_config[ 'password' ]}')
        --help            - Show this message
    -v, --verbose         - Verbose mode

commands
    list [--datapath-id=datapath_id] - List summary of networks
    create [--mac-learning=enable] [id [description]]
                                     - Create a new network
    modify id [description]          - Update details of network
    show id                          - Show details of network
    destroy id                       - Remove the network
    reset id                         - Reset the network
                                       ("destroy-failed" state => "ready-to-destroy" state,
                                        "confirmed" and "update-failed" state => "ready-to-update" state)
    show-port [--datapath-id=datapath_id] net_id [id]
                                     - Retrieve detail of the port
    create-port [--id=id] [--mac-learning=enable] net_id datapath_id (number|name) [vid [description]]
                                     - Create a port on the network
    delete-port net_id id            - Remove a port from the network
    show-mac net_id id [address]     - Retrieve detail of the mac address
    add-mac net_id id address        - Create a mac address on the port
    delete-mac net_id id address     - Remove a mac address from the port
EOS
end

def help_and_exit message = nil
  puts message unless message.nil?
  help
  exit 1
end

def run args
  if args.empty?
    help_and_exit
  end

  DB.connect
  begin
    @subcommands[ ARGV.shift ].call ARGV
  rescue => e
    puts e.message
    if Log.instance.level == Log::DEBUG
      raise
    else
      exit 1
    end
  end
end

# Network

command 'list' do | args |
  options = {}
  option = OptionParser.new
  option.on( '--datapath-id=arg' ) do | arg |
    options[ 'datapath_id' ] = arg
  end
  option.order! args
  parameters = {}
  help_and_exit "Too many arguments" unless args.size == 0
  parameters[ :require_updated_at ] = true
  parameters[ :datapath_id ] = options[ 'datapath_id' ] if not options[ 'datapath_id' ].nil?
  response = Network.list parameters
  raise "No slice found" unless response.size != 0
  response.sort! { | a, b | a[ :id ] <=> b[ :id ] }
  printf "%-8s%-32s%-14s%-21s%s\n", "ID", "Description", "MAC learning", "State", "Updated At"
  response.each do | each |
    printf "%-8s%-32s%-14s%-21s%s\n", each[ :id ], each[ :description ], each[ :mac_learning], each[ :state ], each[ :updated_at ]
  end
end

command 'create' do | args |
  options = {}
  option = OptionParser.new
  option.on( '-l arg', '--mac-learning=arg' ) do | arg |
    options[ :mac_learning ] = arg
  end
  option.order! args
  parameters = {}
  parameters[ :id ] = args.shift
  parameters[ :description ] = args.shift
  parameters[ :mac_learning ] = options[ :mac_learning ]
  help_and_exit "Too many arguments" unless args.size == 0
  data = Network.create( parameters )
  puts "A slice is created successfully (id = #{ data[ :id ]})."
end

command 'modify' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :description ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  Network.update( parameters )
  puts "A slice is modified successfully."
end

command 'show' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  parameters[ :require_updated_at ] = true
  response = Network.show( parameters )
  net_id = response[ :id ]
  puts "[Description]\n#{ response[ :description ] }"
  puts "[Mac learning]\n#{ response[ :mac_learning ] }"
  puts "[State]\n#{ response[ :state ] }"
  puts "[Updated At]\n#{ response[ :updated_at ] }"
  puts "[Ports]"
  indent = "  "
  show_ports net_id, indent
end

command 'destroy' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  Network.destroy( parameters )
  puts "A slice is destroyed successfully."
end

command 'reset' do | args |
  options = {}
  option = OptionParser.new
  option.on( '-f', '--force' ) do | arg |
    options[ 'force' ] = arg
  end
  option.order! args
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  parameters[ :force ] = options[ 'force' ]
  Network.reset( parameters )
  puts "A slice was reset successfully."
end

# revert-destroy: debug only
# revert-destroy id  - Reset the network and revert destory
#                      ("confirmed", "update-failed" and "destroy-failed" state => "ready-to-update" state)
command 'revert-destroy' do | args |
  options = {}
  option = OptionParser.new
  option.on( '-f', '--force' ) do | arg |
    options[ 'force' ] = arg
  end
  option.order! args
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  parameters[ :force ] = options[ 'force' ]
  Network.revert_destroy( parameters )
  puts "A slice was revert-destroy successfully."
end

# failed: debug only
command 'failed' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  Network.failed( parameters )
  puts "State of the slice is updated successfully."
end

# update-transaction-begin: debug only
command 'update-transaction-begin' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  Network.update_transaction_begin( parameters )
  puts "A slice is update-transaction-begin successfully."
end

# update-transaction-end: debug only
command 'update-transaction-end' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  Network.update_transaction_end( parameters )
  puts "A slice is update-transaction-end successfully."
end

# Port

command 'show-port' do | args |
  options = {}
  option = OptionParser.new
  option.on( '--datapath-id=arg' ) do | arg |
    options[ 'datapath_id' ] = arg
  end
  option.order! args
  parameters = {}
  parameters[ :net_id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :id ] = args.shift
  help_and_exit "Too many arguments" unless args.size == 0
  parameters[ :require_updated_at ] = true
  net_id = parameters[ :net_id ]
  if parameters[ :id ].nil?
    show_ports net_id, "", options[ 'datapath_id' ]
  else
    response = Network.show_port( parameters )
    port_id = response[ :id ]
    display_port response
    puts "[Mac addresses]"
    indent = "  "
    show_mac_addresses net_id, port_id, indent
  end
end

command 'create-port' do | args |
  options = {}
  option = OptionParser.new
  option.on( '-i arg', '--id=arg' ) do | arg |
    options[ :id ] = arg
  end
  option.on( '-l arg', '--mac-learning=arg' ) do | arg |
    options[ :mac_learning ] = arg
  end
  option.order! args
  parameters = {}
  parameters[ :net_id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :datapath_id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :id ] = options[ :id ]
  port = args.shift or help_and_exit "Too few arguments"
  if /^[[:digit:]]+$/ =~ port
    parameters[ :number ] = port
  else
    parameters[ :name ] = port
  end
  parameters[ :vid ] = args.shift
  parameters[ :description ] = args.shift
  parameters[ :mac_learning ] = options[ :mac_learning ]
  help_and_exit "Too many arguments" unless args.size == 0
  data = Network.create_port( parameters )
  puts "A port is added successfully (id = #{ data[ :id ] })."
end

command 'delete-port' do | args |
  parameters = {}
  parameters[ :net_id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  Network.delete_port( parameters )
  puts "A port is deleted successfully."
end

# MAC address

command 'show-mac' do | args |
  parameters = {}
  parameters[ :net_id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :address ] = args.shift
  help_and_exit "Too many arguments" unless args.size == 0
  parameters[ :require_updated_at ] = true
  if not parameters[ :address ].nil?
    display_mac_address Network.show_mac_address( parameters )
    indent = "  "
    mac_addresses = Network.show_remote_mac_addresses( parameters )
    puts "[Remotes]"
    if mac_addresses.empty?
      puts "#{ indent }No mac addresses found."
    else
      mac_addresses.collect do | each |
        display_mac_address each, "#{ indent }  "
      end
    end
  else
    show_mac_addresses parameters[ :net_id ], parameters[ :id ]
  end
end

command 'add-mac' do | args |
  parameters = {}
  parameters[ :net_id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :address ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  data = Network.create_mac_address( parameters )
  puts "A MAC address is added successfully (address = #{ data[ :address ] })."
end

command 'delete-mac' do | args |
  parameters = {}
  parameters[ :net_id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  parameters[ :address ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  Network.delete_mac_address( parameters )
  puts "A MAC address is deleted successfully."
end

#

def show_ports net_id, indent = "", datapath_id = nil
  ports = Network.show_ports( { :net_id => net_id, :datapath_id => datapath_id, :require_updated_at => true } )
  if ports.empty?
    puts "#{ indent }No ports found."
  else
    ports.each do | each |
      port_id = each[ :id ]
      display_port each, indent
      puts "#{ indent }[Mac addresses]"
      show_mac_addresses net_id, port_id, "#{ indent}  "
    end
  end
end

def show_mac_addresses net_id, port_id, indent = ""
  mac_addresses = Network.show_mac_addresses( { :net_id => net_id, :id => port_id, :require_state => true, :require_updated_at => true })
  if mac_addresses.empty?
    puts "#{ indent }No mac addresses found."
  else
    mac_addresses.each do | each |
      display_mac_address each, indent
    end
  end
end

def display_port response, indent = ""
  puts "#{ indent }[ID: #{ response[ :id ] }]"
  puts "#{ indent }Description: #{ response[ :description ] }"
  puts "#{ indent }Datapath Id: #{ response[ :datapath_id ] }"
  puts "#{ indent }Port: #{ response[ :number ] } (#{ ( response[ :name ].blank? and "port-name-unknown" or response[ :name ] ) })"
  puts "#{ indent }Vlan Id: #{ response[ :vid ] }"
  puts "#{ indent }Type: #{ response[ :type ] }"
  puts "#{ indent }MAC learning: #{ response[ :mac_learning ] }"
  puts "#{ indent }State: #{ response[ :state ] }"
  puts "#{ indent }Updated At: #{ response[ :updated_at ] }"
end

def display_mac_address response, indent = ""
  puts "#{ indent }[MAC: #{ response[ :address ] }]"
  puts "#{ indent }Datapath Id: #{ response[ :datapath_id ] }" unless response[ :datapath_id ].nil?
  puts "#{ indent }Type: #{ response[ :type ] }" unless response[ :type ].nil?
  puts "#{ indent }State: #{ response[ :state ] }"
  puts "#{ indent }Updated At: #{ response[ :updated_at ] }"
end

# internal-x: debug only

command 'internal-switch-list' do | args |
  help_and_exit "Too many arguments" unless args.size == 0
  desiplay_ids Internal::Switch.list
end

command 'internal-switch-show' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  response = Internal::Switch.show( parameters )
  puts "[ID: #{ response[ :id ] }]"
  puts "Registered at: #{ response[ :registered_at ] }"
  response = Internal::SwitchPort.list( parameters )
  unless response.size == 0
    puts "[Ports]"
    response.each do | each |
      puts "  [Port: #{ each[ :port_no ] } (#{ ( each[ :name ].blank? and "port-name-unknown" or each[ :name ] ) })]"
      puts "  Registered at: #{ each[ :registered_at ] }"
    end
  end
end

command 'internal-agent-list' do | args |
  help_and_exit "Too many arguments" unless args.size == 0
  desiplay_ids Internal::VirtualNetworkAgent.list
end

command 'internal-agent-show' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  response = Internal::VirtualNetworkAgent.show( parameters )
  puts "[ID: #{ response[ :id ] }]"
  puts "Uri: #{ response[ :uri ] }"
end

command 'internal-vtep-list' do | args |
  help_and_exit "Too many arguments" unless args.size == 0
  desiplay_ids Internal::VxlanTunnelEndpoint.list
end

command 'internal-vtep-show' do | args |
  parameters = {}
  parameters[ :id ] = args.shift or help_and_exit "Too few arguments"
  help_and_exit "Too many arguments" unless args.size == 0
  response = Internal::VxlanTunnelEndpoint.show( parameters )
  puts "[ID: #{ response[ :id ] }]"
  puts "Local address: #{ response[ :local_address ] }"
  puts "Local port: #{ response[ :local_port ] }"
end

def desiplay_ids response
  puts "ID"
  response.each do | each |
    puts "#{ each }"
  end
end

option.order! ARGV
run ARGV
